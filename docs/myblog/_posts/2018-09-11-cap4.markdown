---
layout: post
title:  "3. Manipulação de Histogramas"
date:   2018-09-11 19:26:10 -0300
categories: jekyll update
---
Problema 1:

O código abaixo, equalizacao.cpp, utiliza uma câmera webcam, e portanto, uma nova classe do OpenCV, VideoCapture. O algoritmo irá realizar a equalização (melhor distribuição do histograma pelo spectro de tons) das imagens em tons de cinza capturadas pela webcam, frame a frame, e exibir o histograma dessas imagens juntamente da imagem equalizada. 

O Programa equalizacao.cpp:

{% highlight ruby %}
#include <iostream>
#include <opencv2/opencv.hpp>

using namespace cv;
using namespace std;

int main(int argc, char** argv){
  Mat image, cinza(256,256,CV_8U), equalized(256,256,CV_8U);
  int width, height;
  VideoCapture cap;
  Mat histC(64,64,CV_8U), equa(64,64,CV_8U);
  int nbins = 64, channel = 0;
  float range[] = {0, 256};
  const float *histrange = { range };
  bool uniform = true;
  bool acummulate = false;

  cap.open(0);
  
  if(!cap.isOpened()){
    cout << "cameras indisponiveis" << endl;
    return -1;
  }
  
  width  = cap.get(CV_CAP_PROP_FRAME_WIDTH);
  height = cap.get(CV_CAP_PROP_FRAME_HEIGHT);

  cout << "largura = " << width << endl;
  cout << "altura  = " << height << endl;
  
  int histw = nbins, histh = nbins/2;
  Mat histImgC(histh, histw, CV_8U, Scalar(0));
  Mat histEquC(histh, histw, CV_8U, Scalar(0));

  namedWindow("Histograma",WINDOW_AUTOSIZE);

  while(waitKey(30)!=32){
    cap >> image;
	cvtColor(image,cinza,CV_BGR2GRAY);

	equalizeHist(cinza, equalized);

	calcHist(&cinza,1,0,Mat(),histC,1,&nbins,&histrange,uniform,acummulate);  //Histograma para imagem cinza normal
	normalize(histC, histC, 0, histImgC.rows, NORM_MINMAX, -1, Mat());
  	histImgC.setTo(Scalar(0));

	calcHist(&equalized,1,0,Mat(),equa,1,&nbins,&histrange,uniform,acummulate); //Histograma para imagem cinza equalizada
	normalize(equa, equa, 0, histImgC.rows, NORM_MINMAX, -1, Mat());
  	histEquC.setTo(Scalar(0));

	for(int i=0; i<nbins; i++){
      line(histImgC,
           Point(i, histh),
           Point(i, histh-cvRound(histC.at<float>(i))),
           Scalar(255), 1, 8, 0);
    }

	histImgC.copyTo(cinza(Rect(0, 0,nbins, histh)));
	imshow("Histograma", cinza);

	for(int i=0; i<nbins; i++){
      line(histEquC,
           Point(i, histh),
           Point(i, histh-cvRound(equa.at<float>(i))),
           Scalar(255), 1, 8, 0);
    }

	histEquC.copyTo(equalized(Rect(0, 0,nbins, histh)));
     	imshow("Equalizado", equalized);

    imshow("image", image);
  
  }
  return 0;
}
{% endhighlight %}

Neste algoritmo foram utilizadas funções prontas do OpenCV tanto para realizar a conversão das imagens em RGB capturadas pela câmera ("cvtColor(image,cinza,CV_BGR2GRAY)") quanto para calcular o histograma ("calcHist(&equalized,1,0,Mat(),equa,1,&nbins,&histrange,uniform,acummulate)") e realizar a equalização ("equalizeHist(cinza, equalized)").

A matriz "equalized" guarda a imagem equalizada, enquanto a matriz "cinza" guarda a imagem recém-capturada, apenas convertida para tons de cinza.

Problema 2: 

Agora, o programa acima foi modificado para calcular, continuamente, diferenças entre o histograma do frame mais recente e o histograma de um frame anterior, com o intuito de detectar movimentos entre os dois frames utilizados para cálculo dos histogramas. O algoritmo foi chamado de motiondetector.cpp e está detalhado a seguir:

{% highlight ruby %}
#include <iostream>
#include <opencv2/opencv.hpp>

using namespace cv;
using namespace std;

int main(int argc, char** argv){
  Mat image1, image2, cinza1(256,256,CV_8U), cinza2(256,256,CV_8U);
  int width, height;
  VideoCapture cap1;
  Mat histC1(64,64,CV_8U), histC2(64,64,CV_8U);
  int nbins = 64, channel = 0;
  float range[] = {0, 256}, tolerancia = 5, distancia=0;
  const float *histrange = { range };
  bool uniform = true;
  bool acummulate = false;

  cap1.open(0);
  
  if(!cap1.isOpened()){
    cout << "cameras indisponiveis" << endl;
    return -1;
  }
  
  width  = cap1.get(CV_CAP_PROP_FRAME_WIDTH);
  height = cap1.get(CV_CAP_PROP_FRAME_HEIGHT);

  cout << "largura = " << width << endl;
  cout << "altura  = " << height << endl;
  
  int histw = nbins, histh = nbins/2;
  Mat histImgC1(histh, histw, CV_8U, Scalar(0));

  while(waitKey(30)!=32){

    
	cap1 >> image1;
	cvtColor(image1,cinza1,CV_BGR2GRAY);
	waitKey(50);

	calcHist(&cinza1,1,0,Mat(),histC1,1,&nbins,&histrange,uniform,acummulate);  //Histograma para imagem cinza normal
	normalize(histC1, histC1, 0, histImgC1.rows, NORM_MINMAX, -1, Mat());
  	histImgC1.setTo(Scalar(0));

	cap1 >> image2;
	cvtColor(image2,cinza2,CV_BGR2GRAY);
	
	calcHist(&cinza2,1,0,Mat(),histC2,1,&nbins,&histrange,uniform,acummulate);

	distancia=compareHist(histC2,histC1,CV_COMP_BHATTACHARYYA);

	if(distancia*100>tolerancia){
	cout << "Movimento!!" << endl;
	}

	for(int i=0; i<nbins; i++){
      line(histImgC1,
           Point(i, histh),
           Point(i, histh-cvRound(histC1.at<float>(i))),
           Scalar(255), 1, 8, 0);
    }

	histImgC1.copyTo(cinza1(Rect(0, 0,nbins, histh)));
	imshow("Tom Cinza", cinza1);

  }
  return 0;
}
{% endhighlight %}

Para esse algortimo utiliza-se uma função que calcula a "distância" entre os histogramas, ou seja calcula a diferença. Para realizar isto o OpenCV disponibiliza uma função ("compareHist(histC2,histC1,CV_COMP_BHATTACHARYYA)"), que recebe como parâmetros apenas os histogramas que serão calculados e o tipo de comparação que se deseja realizar. No caso desse algoritmo foi utilizado o método de distância de Bhattacharyya. É importante obserjar que o programa recebe em dois momentos as imagens capturadas pelas câmera, nas linhas 37 e 45. E ainda, entre estas duas aquisições de imagens, o programa aguarda 50 ms, através da função "waitKey(50)", para garantir que as imagens são minimamente diferentes.

A função "compareHist" retorna um valor menor do que "1", e por isso, a variável de armazenamento deste valor foi definida como float. Caso essa variável apresente valor maior do que a tolerância estabelecida ("5"), o programa imprime na tela a mensagem: "Movimento!!". A tolerância foi definida como "5" apenas, devido o retorno da função "compareHist" ser bem próximo de "0" para ausência de movimento, e acima de "5" para alguns movimentos, mesmo que suaves, em frente a câmera.

[jekyll-docs]: https://jekyllrb.com/docs/home
[jekyll-gh]:   https://github.com/jekyll/jekyll
[jekyll-talk]: https://talk.jekyllrb.com/
